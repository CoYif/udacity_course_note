// This is the beginning of real ultilizing git jourey 
// First commond will initilise the current folder as a repository 
git init 

// Check current dirtory files status 
git status

// Add the files to the staging aread before commit
git add . (It will add all the files under this folder)

git add file1 (It will add only the file1 to the staging area)

// Check the file's modification between working directory and staged area
git diff 

// Check the difference between staged area and repository
git diff --staged

// Reset all the changes made in staged area and working directory
git reset hard (It'll reset all the changes made in both working directory and staged area)


// If you have insert a new commit when you checkout a commit. That new commit will be unreachable, to make it reachable you need to create a branch for it.
// E.g. you have commit "a1" -> "a2" -> "a3" -> "a4"
git checkout "a2"
// You made some changes, then commit
git commit "b1"
git checkout master 
git log 
// You'll not see the commit "b1" you just made. becaue it's not in the master branch
// You should do this
git checkout "b1"
git checkout -b New_Branch_Name (This commond is equivalent to "git branch New_Branch_Name", then "git checkout New_Branch_Name)
// When you run that commond, you must in that commit "b1" position

// Check the branches you have and you currently in
git branch 

// Create new branch 
git branch Branch_Name

// Checkout the branch 
git checkout Branch_Name

// Go back to the master branch 
git checkout master 

// delete a branch
git branch -d Branch_Name

// When you merge two branches, e.g. commit "b1" is form another branch ,"a1" is from master, if you want to see the diff between "b1" and it's parents, 
// you cannot just diff "b1" and "a1", because "a1" it's not his parents maybe. You can run the commond below 
git show "b1"

/*************Some notes form the online course*****************\
About the git merge
Merge conflict (Newline characters between Windows and Unix systems)
Context: Whenever we hit the "Enter" key on the keyboard, we are actually telling the computer to insert an invisible character into our text file to indicate to the computer that there should be a new line. 
Unix systems adds one character called the "line feed" character or LF or \n while Windows systems adds two characters, "carriage return" and "line feed" or CRLF or \r\n.

Caroline's files have LF because her files were edited on Mac OSX, which uses LF. If a Windows user were to edit Caroline's files, the Windows text editor might convert all LF to CRLF to make editing files possible. When the Windows user merges her file with Caroline's files, a merge conflict will result due to the different LF and CRLF characters.

To fix this, Windows users should set the global autocrlf attribute to true: git config --global core.autocrlf true. More information can be found here: https://help.github.com/articles/dealing-with-line-endings/#platform-all